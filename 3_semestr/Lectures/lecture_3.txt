////////////////////////////////
//   LECTURE №3 (PROCESSES)   //
////////////////////////////////

pid = 77;

pid = fork();  -> system call  -> parent		 child
								--------- copy 	----------
								|pid1	| ->>>> |pid2	 | --> return
								---------		----------
									|
									----->return pid2(child)

if (pid == 0) child()

else parent()


NO: wait(&status) - stop process
if process work -> wait() - block

//status finish programm

NO: exit() - complete process
//-------
return N
_exit(N);
exit(N)
//-------

---------------------
|	exicted	|	N	|
---------------------
	 				^
bool WIFEXITED(st)   |
-true, false		 |
					 |
WEXITSTATUS(st) ------

//-------------------------------------------
DO: _fork_

1)write N through the console
2)create N processes
3)using ppid and pid print info about process

//--------------------------------------------
DO: _exec_ 
1)get time
2)use exec
3)use fork
//--------------------------------------------

DO: sleepsort

in console a1, a2, a3 ... a_n
create p1, p2, ... p_n

sleep 100 mks - 1 ms

sleep(N, a_k)

printf (a_i)

new: sort processes: print a1, a2, ... a_t
//--------------------------------------------

NO: apropos sleep

asleep()

func: 
-strace() - распечатать всю трассировку
strace -f 

Ex: strace -f ./myproc.out


 parent
  / \
ch1  ch2
|
ch

func:
-exec
(execv)
(exece)
arg: [exe_file, argu, env]

func:
execv(const * path, const char * argv[]) -> (exec vector)
execl(const * path, a1, a2, a3, NULL)
			  ^
			  |
execvp --------
execlp

perror()

Ex: execvp( path = "ls") -> /bin/ls

PATH:
	/bin
	/usr/bin


DO: mytime	ls  /
		

out: time = 1.3423

NO: for time

-gettimeofday

NO: не падать, если нет такой проги

mytime sleep(5) 